// Package models contains the types for schema.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"reflect"
	"time"

	"github.com/pkg/errors"
	"github.com/shopspring/decimal"
	"github.com/sirupsen/logrus"
)

// Storage is interface structure for database operation that can be called
type Storage interface {
	// InsertAuthor inserts the Author to the database.
	InsertAuthor(db XODB, a *Author) error
	// InsertAuthorByFields inserts the Author to the database.
	InsertAuthorByFields(db XODB, a *Author) error
	// DeleteAuthor deletes the Author from the database.
	DeleteAuthor(db XODB, a *Author) error
	// DeleteAuthors deletes the Author from the database.
	DeleteAuthors(db XODB, a []*Author) error
	// Update updates the Author in the database.
	UpdateAuthor(db XODB, a *Author) error
	// UpdateAuthorByFields updates the Author in the database.
	UpdateAuthorByFields(db XODB, a *Author, fields, retCols []string, params, retVars []interface{}) error
	// Save saves the Author to the database.
	SaveAuthor(db XODB, a *Author) error
	// Upsert performs an upsert for Author.
	UpsertAuthor(db XODB, a *Author) error
	// GetMostRecentAuthor returns n most recent rows from 'authors',
	// ordered by "created_date" in descending order.
	GetMostRecentAuthor(db XODB, n int) ([]*Author, error)
	// GetMostRecentChangedAuthor returns n most recent rows from 'authors',
	// ordered by "changed_date" in descending order.
	GetMostRecentChangedAuthor(db XODB, n int) ([]*Author, error)
	// GetAllAuthor returns all rows from 'authors', based on the AuthorQueryArguments.
	// If the AuthorQueryArguments is nil, it will use the default AuthorQueryArguments instead.
	GetAllAuthor(db XODB, queryArgs *AuthorQueryArguments) ([]*Author, error)
	// CountAllAuthor returns a count of all rows from 'authors'
	CountAllAuthor(db XODB, queryArgs *AuthorQueryArguments) (int, error)
	// InsertBook inserts the Book to the database.
	InsertBook(db XODB, b *Book) error
	// InsertBookByFields inserts the Book to the database.
	InsertBookByFields(db XODB, b *Book) error
	// DeleteBook deletes the Book from the database.
	DeleteBook(db XODB, b *Book) error
	// DeleteBooks deletes the Book from the database.
	DeleteBooks(db XODB, b []*Book) error
	// Update updates the Book in the database.
	UpdateBook(db XODB, b *Book) error
	// UpdateBookByFields updates the Book in the database.
	UpdateBookByFields(db XODB, b *Book, fields, retCols []string, params, retVars []interface{}) error
	// Save saves the Book to the database.
	SaveBook(db XODB, b *Book) error
	// Upsert performs an upsert for Book.
	UpsertBook(db XODB, b *Book) error
	// GetMostRecentBook returns n most recent rows from 'books',
	// ordered by "created_date" in descending order.
	GetMostRecentBook(db XODB, n int) ([]*Book, error)
	// GetMostRecentChangedBook returns n most recent rows from 'books',
	// ordered by "changed_date" in descending order.
	GetMostRecentChangedBook(db XODB, n int) ([]*Book, error)
	// GetAllBook returns all rows from 'books', based on the BookQueryArguments.
	// If the BookQueryArguments is nil, it will use the default BookQueryArguments instead.
	GetAllBook(db XODB, queryArgs *BookQueryArguments) ([]*Book, error)
	// CountAllBook returns a count of all rows from 'books'
	CountAllBook(db XODB, queryArgs *BookQueryArguments) (int, error)
	// BooksByAuthorIDFK retrieves rows from books by foreign key AuthorID.
	// Generated from foreign key Author.
	BooksByAuthorIDFK(db XODB, authorID int, queryArgs *BookQueryArguments) ([]*Book, error)
	// CountBooksByAuthorIDFK count rows from books by foreign key AuthorID.
	// Generated from foreign key Author.
	CountBooksByAuthorIDFK(db XODB, authorID int, queryArgs *BookQueryArguments) (int, error)
	// AuthorInBook returns the Author associated with the Book's AuthorID (author_id).
	// Generated from foreign key 'books_author_id_fkey'.
	AuthorInBook(db XODB, b *Book) (*Author, error)
	// AuthorsByName retrieves a row from 'public.authors' as a Author.
	// Generated from index 'authors_name_idx'.
	AuthorsByName(db XODB, name string) ([]*Author, error)
	// AuthorByAuthorID retrieves a row from 'public.authors' as a Author.
	// Generated from index 'authors_pkey'.
	AuthorByAuthorID(db XODB, authorID int) (*Author, error)
	// BookByIsbn retrieves a row from 'public.books' as a Book.
	// Generated from index 'books_isbn_key'.
	BookByIsbn(db XODB, isbn string) (*Book, error)
	// BookByBookID retrieves a row from 'public.books' as a Book.
	// Generated from index 'books_pkey'.
	BookByBookID(db XODB, bookID int) (*Book, error)
	// BooksByTitle retrieves a row from 'public.books' as a Book.
	// Generated from index 'books_title_idx'.
	BooksByTitle(db XODB, title string, year int) ([]*Book, error)
	// BooksByTitleLower retrieves a row from 'public.books' as a Book.
	// Generated from index 'books_title_lower_idx'.
	BooksByTitleLower(db XODB, title string) ([]*Book, error)
}

// PostgresStorage is Postgres for the database.
type PostgresStorage struct {
	logger XOLogger
}

func (s *PostgresStorage) info(format string, args ...interface{}) {
	if len(args) == 0 {
		xoLog(s.logger, logrus.InfoLevel, format)
	} else {
		xoLogf(s.logger, logrus.InfoLevel, "%s %v", format, args)
	}
}

// New is a construction method that return a new Storage
func New(driver string, c Config) (Storage, error) {
	// fix bug which interface type is not nil and interface value is nil
	var logger XOLogger
	if c.Logger != nil && !(reflect.ValueOf(c.Logger).Kind() == reflect.Ptr && reflect.ValueOf(c.Logger).IsNil()) {
		logger = c.Logger
	}

	var s Storage
	switch driver {
	case "postgres":
		s = &PostgresStorage{logger: logger}
	default:
		return nil, errors.New("driver " + driver + " not support")
	}

	return s, nil
}

// Author represents a row from 'public.authors'.
type Author struct {
	AuthorID int    `json:"author_id"` // author_id
	Name     string `json:"name"`      // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Author exists in the database.
func (a *Author) Exists() bool {
	return a._exists
}

// Deleted provides information if the Author has been deleted from the database.
func (a *Author) Deleted() bool {
	return a._deleted
} // Book represents a row from 'public.books'.
type Book struct {
	BookID    int                 `json:"book_id"`   // book_id
	AuthorID  int                 `json:"author_id"` // author_id
	Isbn      string              `json:"isbn"`      // isbn
	Booktype  BookType            `json:"booktype"`  // booktype
	Title     string              `json:"title"`     // title
	Year      int                 `json:"year"`      // year
	Available time.Time           `json:"available"` // available
	Tags      StringSlice         `json:"tags"`      // tags
	Width     decimal.Decimal     `json:"width"`     // width
	Length    decimal.NullDecimal `json:"length"`    // length

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Book exists in the database.
func (b *Book) Exists() bool {
	return b._exists
}

// Deleted provides information if the Book has been deleted from the database.
func (b *Book) Deleted() bool {
	return b._deleted
}

// extension block
