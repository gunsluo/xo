// Package models contains the types for schema.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"fmt"
	"strings"

	"github.com/mattn/go-oci8"
	"github.com/pkg/errors"
)

// InsertAuthor inserts the Author to the database.
func (s *GodrorStorage) InsertAuthor(db XODB, a *Author) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "C##ADMIN"."authors" (` +
		`"name"` +
		`) VALUES (` +
		`:1` +
		`)`

	// run query
	s.info(sqlstr, a.Name)
	ret, err := db.Exec(sqlstr, a.Name)
	if err != nil {
		return err
	}

	// query lastInsertId
	lastInsertId, err := ret.LastInsertId()
	if err != nil {
		return err
	}
	rowid := oci8.GetLastInsertId(lastInsertId)

	var id int64
	err = db.QueryRow(`SELECT "author_id" from "C##ADMIN"."authors" WHERE rowid = :1`, rowid).Scan(&id)
	if err != nil {
		return err
	}
	a.AuthorID = id

	// set existence
	a._exists = true

	return nil
}

// InsertAuthorByFields inserts the Author to the database.
func (s *GodrorStorage) InsertAuthorByFields(db XODB, a *Author) error {
	var err error

	params := make([]interface{}, 0, 1)
	fields := make([]string, 0, 1)
	retCols := `"author_id"`
	retVars := make([]interface{}, 0, 1)
	retVars = append(retVars, &a.AuthorID)
	fields = append(fields, `"name"`)
	params = append(params, a.Name)
	if len(params) == 0 {
		// FIXME(jackie): maybe we should allow this?
		return errors.New("all fields are empty, unable to insert")
	}

	var placeHolders []string
	var placeHolderVals []interface{}
	for i := range params {
		placeHolders = append(placeHolders, ":%d")
		placeHolderVals = append(placeHolderVals, i+1)
	}
	placeHolderStr := fmt.Sprintf(strings.Join(placeHolders, ","), placeHolderVals...)
	sqlstr := `INSERT INTO "C##ADMIN"."authors" (` +
		strings.Join(fields, ",") +
		`) VALUES (` + placeHolderStr +
		`)`

		// run query
	s.info(sqlstr, params)
	ret, err := db.Exec(sqlstr, params...)
	if err != nil {
		return err
	}

	// query lastInsertId
	lastInsertId, err := ret.LastInsertId()
	if err != nil {
		return err
	}
	rowid := oci8.GetLastInsertId(lastInsertId)

	err = db.QueryRow(`SELECT `+retCols+` from "C##ADMIN"."authors" WHERE rowid = :1`, rowid).Scan(retVars...)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// UpdateAuthor updates the Author in the database.
func (s *GodrorStorage) UpdateAuthor(db XODB, a *Author) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "C##ADMIN"."authors" SET ` +
		`"name" = :1` +
		` WHERE "author_id" = :2`

	// run query
	s.info(sqlstr, a.Name, a.AuthorID)
	_, err = db.Exec(sqlstr, a.Name, a.AuthorID)
	return err
}

// UpdateAuthorByFields updates the Author in the database.
func (s *GodrorStorage) UpdateAuthorByFields(db XODB, a *Author, fields, retCols []string, params, retVars []interface{}) error {
	var setstr string
	var idxvals []interface{}
	for i, field := range fields {
		if i != 0 {
			setstr += ", "
		}
		setstr += field + ` = :%d`
		idxvals = append(idxvals, i+1)
	}

	params = append(params, a.AuthorID)
	idxvals = append(idxvals, len(params))
	var sqlstr = fmt.Sprintf(`UPDATE "C##ADMIN"."authors" SET `+
		setstr+` WHERE "author_id" = :%d`, idxvals...)
	s.info(sqlstr, params)
	if _, err := db.Exec(sqlstr, params...); err != nil {
		return err
	}

	err := db.QueryRow(`SELECT `+strings.Join(retCols, ",")+` from "C##ADMIN"."authors" WHERE "author_id" = :1`, a.AuthorID).Scan(retVars...)
	if err != nil {
		return err
	}

	return nil
}

// SaveAuthor saves the Author to the database.
func (s *GodrorStorage) SaveAuthor(db XODB, a *Author) error {
	if a.Exists() {
		return s.UpdateAuthor(db, a)
	}

	return s.InsertAuthor(db, a)
}

// UpsertAuthor performs an upsert for Author.
func (s *GodrorStorage) UpsertAuthor(db XODB, a *Author) error {
	var err error

	// sql query

	const sqlstr = `MERGE INTO "C##ADMIN"."authors" t ` +
		`USING (SELECT :1 AS "author_id", :2 AS "name" FROM dual) s ` +
		`ON (t."author_id" = s."author_id") ` +
		`WHEN MATCHED THEN UPDATE SET "name" = s."name" ` +
		`WHEN NOT MATCHED THEN INSERT ("name") VALUES (s."name")`

	// run query
	s.info(sqlstr, a.AuthorID, a.Name)
	_, err = db.Exec(sqlstr, a.AuthorID, a.Name)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// DeleteAuthor deletes the Author from the database.
func (s *GodrorStorage) DeleteAuthor(db XODB, a *Author) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "C##ADMIN"."authors" WHERE "author_id" = :1`

	// run query
	s.info(sqlstr, a.AuthorID)
	_, err = db.Exec(sqlstr, a.AuthorID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// DeleteAuthors deletes the Author from the database.
func (s *GodrorStorage) DeleteAuthors(db XODB, as []*Author) error {
	var err error

	if len(as) == 0 {
		return nil
	}

	var args []interface{}
	var placeholder string
	for i, a := range as {
		args = append(args, a.AuthorID)
		if i != 0 {
			placeholder = placeholder + ", "
		}
		placeholder += fmt.Sprintf(":%d", i+1)
	}

	// sql query
	var sqlstr = `DELETE FROM "C##ADMIN"."authors" WHERE "author_id" in (` + placeholder + `)`

	// run query
	s.info(sqlstr, args)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	// set deleted
	for _, a := range as {
		a._deleted = true
	}

	return nil
}

// GetMostRecentAuthor returns n most recent rows from 'authors',
// ordered by "created_date" in descending order.
func (s *GodrorStorage) GetMostRecentAuthor(db XODB, n int) ([]*Author, error) {
	const sqlstr = `SELECT ` +
		`"author_id", "name" ` +
		`FROM "C##ADMIN"."authors" ` +
		`ORDER BY "created_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Author
	for q.Next() {
		a := Author{}

		// scan
		err = q.Scan(&a.AuthorID, &a.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// GetMostRecentChangedAuthor returns n most recent rows from 'authors',
// ordered by "changed_date" in descending order.
func (s *GodrorStorage) GetMostRecentChangedAuthor(db XODB, n int) ([]*Author, error) {
	const sqlstr = `SELECT ` +
		`"author_id", "name" ` +
		`FROM "C##ADMIN"."authors" ` +
		`ORDER BY "changed_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Author
	for q.Next() {
		a := Author{}

		// scan
		err = q.Scan(&a.AuthorID, &a.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// GetAllAuthor returns all rows from 'authors', based on the AuthorQueryArguments.
// If the AuthorQueryArguments is nil, it will use the default AuthorQueryArguments instead.
func (s *GodrorStorage) GetAllAuthor(db XODB, queryArgs *AuthorQueryArguments) ([]*Author, error) { // nolint: gocyclo
	queryArgs = ApplyAuthorQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getAuthorFilter(queryArgs.Where)
		if err != nil {
			return nil, errors.Wrap(err, "unable to get Author filter")
		}
		queryArgs.filterArgs = filterArgs
	}

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	orderBy := "author_id"
	foundIndex := false
	dbFields := map[string]bool{
		"author_id": true,
		"name":      true,
	}

	if *queryArgs.OrderBy != "" && *queryArgs.OrderBy != defaultOrderBy {
		foundIndex = dbFields[*queryArgs.OrderBy]
		if !foundIndex {
			return nil, fmt.Errorf("unable to order by %s, field not found", *queryArgs.OrderBy)
		}
		orderBy = *queryArgs.OrderBy
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}
	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s" %s OFFSET :%d ROWS FETCH NEXT :%d ROWS ONLY`,
		`"author_id", "name" `,
		`"C##ADMIN"."authors"`,
		placeHolders,
		dead,
		orderBy,
		desc,
		offsetPos,
		limitPos)
	s.info(sqlstr, params)

	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Author
	for q.Next() {
		a := Author{}

		// scan
		err = q.Scan(&a.AuthorID, &a.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// CountAllAuthor returns a count of all rows from 'authors'
func (s *GodrorStorage) CountAllAuthor(db XODB, queryArgs *AuthorQueryArguments) (int, error) {
	queryArgs = ApplyAuthorQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getAuthorFilter(queryArgs.Where)
		if err != nil {
			return 0, errors.Wrap(err, "unable to get Author filter")
		}
		queryArgs.filterArgs = filterArgs
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "C##ADMIN"."authors" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// AuthorsByName retrieves a row from '"C##ADMIN"."authors"' as a Author.
//
// Generated from index 'authors_name_idx'.
func (s *GodrorStorage) AuthorsByName(db XODB, name string) ([]*Author, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"author_id", "name" ` +
		`FROM "C##ADMIN"."authors" ` +
		`WHERE "name" = :1`

	// run query
	s.info(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Author{}
	for q.Next() {
		a := Author{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.AuthorID, &a.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AuthorByAuthorID retrieves a row from '"C##ADMIN"."authors"' as a Author.
//
// Generated from index 'sys_c007892'.
func (s *GodrorStorage) AuthorByAuthorID(db XODB, authorID int64) (*Author, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"author_id", "name" ` +
		`FROM "C##ADMIN"."authors" ` +
		`WHERE "author_id" = :1`

	// run query
	s.info(sqlstr, authorID)
	a := Author{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, authorID).Scan(&a.AuthorID, &a.Name)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
