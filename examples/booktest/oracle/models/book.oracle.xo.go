// Package models contains the types for schema.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"fmt"
	"strings"

	"github.com/mattn/go-oci8"
	"github.com/pkg/errors"
)

// InsertBook inserts the Book to the database.
func (s *GodrorStorage) InsertBook(db XODB, b *Book) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "C##ADMIN"."books" (` +
		`"author_id", "isbn", "title", "year", "available", "tags"` +
		`) VALUES (` +
		`:1, :2, :3, :4, :5, :6` +
		`)`

	// run query
	s.info(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	ret, err := db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	if err != nil {
		return err
	}

	// query lastInsertId
	lastInsertId, err := ret.LastInsertId()
	if err != nil {
		return err
	}
	rowid := oci8.GetLastInsertId(lastInsertId)

	var id int64
	err = db.QueryRow(`SELECT "book_id" from "C##ADMIN"."books" WHERE rowid = :1`, rowid).Scan(&id)
	if err != nil {
		return err
	}
	b.BookID = id

	// set existence
	b._exists = true

	return nil
}

// InsertBookByFields inserts the Book to the database.
func (s *GodrorStorage) InsertBookByFields(db XODB, b *Book) error {
	var err error

	params := make([]interface{}, 0, 6)
	fields := make([]string, 0, 6)
	retCols := `"book_id"`
	retVars := make([]interface{}, 0, 6)
	retVars = append(retVars, &b.BookID)
	fields = append(fields, `"author_id"`)
	params = append(params, b.AuthorID)

	fields = append(fields, `"isbn"`)
	params = append(params, b.Isbn)

	fields = append(fields, `"title"`)
	params = append(params, b.Title)

	fields = append(fields, `"year"`)
	params = append(params, b.Year)

	fields = append(fields, `"available"`)
	params = append(params, b.Available)
	if b.Tags.Valid {
		fields = append(fields, `"tags"`)
		params = append(params, b.Tags)
	} else {
		retCols += `, "tags"`
		retVars = append(retVars, &b.Tags)
	}
	if len(params) == 0 {
		// FIXME(jackie): maybe we should allow this?
		return errors.New("all fields are empty, unable to insert")
	}

	var placeHolders []string
	var placeHolderVals []interface{}
	for i := range params {
		placeHolders = append(placeHolders, ":%d")
		placeHolderVals = append(placeHolderVals, i+1)
	}
	placeHolderStr := fmt.Sprintf(strings.Join(placeHolders, ","), placeHolderVals...)
	sqlstr := `INSERT INTO "C##ADMIN"."books" (` +
		strings.Join(fields, ",") +
		`) VALUES (` + placeHolderStr +
		`)`

		// run query
	s.info(sqlstr, params)
	ret, err := db.Exec(sqlstr, params...)
	if err != nil {
		return err
	}

	// query lastInsertId
	lastInsertId, err := ret.LastInsertId()
	if err != nil {
		return err
	}
	rowid := oci8.GetLastInsertId(lastInsertId)

	err = db.QueryRow(`SELECT `+retCols+` from "C##ADMIN"."books" WHERE rowid = :1`, rowid).Scan(retVars...)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// UpdateBook updates the Book in the database.
func (s *GodrorStorage) UpdateBook(db XODB, b *Book) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "C##ADMIN"."books" SET ` +
		`"author_id" = :1, "isbn" = :2, "title" = :3, "year" = :4, "available" = :5, "tags" = :6` +
		` WHERE "book_id" = :7`

	// run query
	s.info(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	_, err = db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	return err
}

// UpdateBookByFields updates the Book in the database.
func (s *GodrorStorage) UpdateBookByFields(db XODB, b *Book, fields, retCols []string, params, retVars []interface{}) error {
	var setstr string
	var idxvals []interface{}
	for i, field := range fields {
		if i != 0 {
			setstr += ", "
		}
		setstr += field + ` = :%d`
		idxvals = append(idxvals, i+1)
	}

	params = append(params, b.BookID)
	idxvals = append(idxvals, len(params))
	var sqlstr = fmt.Sprintf(`UPDATE "C##ADMIN"."books" SET `+
		setstr+` WHERE "book_id" = :%d`, idxvals...)
	s.info(sqlstr, params)
	if _, err := db.Exec(sqlstr, params...); err != nil {
		return err
	}

	err := db.QueryRow(`SELECT `+strings.Join(retCols, ",")+` from "C##ADMIN"."books" WHERE "book_id" = :1`, b.BookID).Scan(retVars...)
	if err != nil {
		return err
	}

	return nil
}

// SaveBook saves the Book to the database.
func (s *GodrorStorage) SaveBook(db XODB, b *Book) error {
	if b.Exists() {
		return s.UpdateBook(db, b)
	}

	return s.InsertBook(db, b)
}

// UpsertBook performs an upsert for Book.
func (s *GodrorStorage) UpsertBook(db XODB, b *Book) error {
	var err error

	// sql query

	const sqlstr = `MERGE INTO "C##ADMIN"."books" t ` +
		`USING (SELECT :1 AS "book_id", :2 AS "author_id", :3 AS "isbn", :4 AS "title", :5 AS "year", :6 AS "available", :7 AS "tags" FROM dual) s ` +
		`ON (t."book_id" = s."book_id") ` +
		`WHEN MATCHED THEN UPDATE SET "author_id" = s."author_id", "isbn" = s."isbn", "title" = s."title", "year" = s."year", "available" = s."available", "tags" = s."tags" ` +
		`WHEN NOT MATCHED THEN INSERT ("author_id", "isbn", "title", "year", "available", "tags") VALUES (s."author_id", s."isbn", s."title", s."year", s."available", s."tags")`

	// run query
	s.info(sqlstr, b.BookID, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	_, err = db.Exec(sqlstr, b.BookID, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// DeleteBook deletes the Book from the database.
func (s *GodrorStorage) DeleteBook(db XODB, b *Book) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "C##ADMIN"."books" WHERE "book_id" = :1`

	// run query
	s.info(sqlstr, b.BookID)
	_, err = db.Exec(sqlstr, b.BookID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// DeleteBooks deletes the Book from the database.
func (s *GodrorStorage) DeleteBooks(db XODB, bs []*Book) error {
	var err error

	if len(bs) == 0 {
		return nil
	}

	var args []interface{}
	var placeholder string
	for i, b := range bs {
		args = append(args, b.BookID)
		if i != 0 {
			placeholder = placeholder + ", "
		}
		placeholder += fmt.Sprintf(":%d", i+1)
	}

	// sql query
	var sqlstr = `DELETE FROM "C##ADMIN"."books" WHERE "book_id" in (` + placeholder + `)`

	// run query
	s.info(sqlstr, args)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	// set deleted
	for _, b := range bs {
		b._deleted = true
	}

	return nil
}

// GetMostRecentBook returns n most recent rows from 'books',
// ordered by "created_date" in descending order.
func (s *GodrorStorage) GetMostRecentBook(db XODB, n int) ([]*Book, error) {
	const sqlstr = `SELECT ` +
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" ` +
		`FROM "C##ADMIN"."books" ` +
		`ORDER BY "created_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Book
	for q.Next() {
		b := Book{}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// GetMostRecentChangedBook returns n most recent rows from 'books',
// ordered by "changed_date" in descending order.
func (s *GodrorStorage) GetMostRecentChangedBook(db XODB, n int) ([]*Book, error) {
	const sqlstr = `SELECT ` +
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" ` +
		`FROM "C##ADMIN"."books" ` +
		`ORDER BY "changed_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Book
	for q.Next() {
		b := Book{}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// GetAllBook returns all rows from 'books', based on the BookQueryArguments.
// If the BookQueryArguments is nil, it will use the default BookQueryArguments instead.
func (s *GodrorStorage) GetAllBook(db XODB, queryArgs *BookQueryArguments) ([]*Book, error) { // nolint: gocyclo
	queryArgs = ApplyBookQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getBookFilter(queryArgs.Where)
		if err != nil {
			return nil, errors.Wrap(err, "unable to get Book filter")
		}
		queryArgs.filterArgs = filterArgs
	}

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	orderBy := "book_id"
	foundIndex := false
	dbFields := map[string]bool{
		"book_id":   true,
		"author_id": true,
		"isbn":      true,
		"title":     true,
		"year":      true,
		"available": true,
		"tags":      true,
	}

	if *queryArgs.OrderBy != "" && *queryArgs.OrderBy != defaultOrderBy {
		foundIndex = dbFields[*queryArgs.OrderBy]
		if !foundIndex {
			return nil, fmt.Errorf("unable to order by %s, field not found", *queryArgs.OrderBy)
		}
		orderBy = *queryArgs.OrderBy
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}
	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s" %s OFFSET :%d ROWS FETCH NEXT :%d ROWS ONLY`,
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" `,
		`"C##ADMIN"."books"`,
		placeHolders,
		dead,
		orderBy,
		desc,
		offsetPos,
		limitPos)
	s.info(sqlstr, params)

	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Book
	for q.Next() {
		b := Book{}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// CountAllBook returns a count of all rows from 'books'
func (s *GodrorStorage) CountAllBook(db XODB, queryArgs *BookQueryArguments) (int, error) {
	queryArgs = ApplyBookQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getBookFilter(queryArgs.Where)
		if err != nil {
			return 0, errors.Wrap(err, "unable to get Book filter")
		}
		queryArgs.filterArgs = filterArgs
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "C##ADMIN"."books" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// BooksByAuthorIDFK retrieves rows from "C##ADMIN"."books" by foreign key AuthorID.
// Generated from foreign key Author.
func (s *GodrorStorage) BooksByAuthorIDFK(db XODB, authorID int64, queryArgs *BookQueryArguments) ([]*Book, error) {
	queryArgs = ApplyBookQueryArgsDefaults(queryArgs)

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pos := 0
		pls := make([]string, 0, len(queryArgs.filterArgs.filterPairs))
		for _, pair := range queryArgs.filterArgs.filterPairs {
			if pair.fieldName == "author_id" {
				return nil, fmt.Errorf("already have condition on field:AuthorID, because of foregin key Author")
			}
			pos++
			pls = append(pls, fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, pos))
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}
	params = append(params, authorID)
	placeHolders = fmt.Sprintf(`%s "author_id" = :%d AND `, placeHolders, len(params))

	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(
		`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s" %s OFFSET :%d ROWS FETCH NEXT :%d ROWS ONLY`,
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" `,
		`"C##ADMIN"."books"`,
		placeHolders,
		dead,
		"book_id",
		desc,
		offsetPos,
		limitPos)

	s.info(sqlstr, params...)
	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Book
	for q.Next() {
		b := Book{}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// CountBooksByAuthorIDFK count rows from "C##ADMIN"."books" by foreign key AuthorID.
// Generated from foreign key Author.
func (s *GodrorStorage) CountBooksByAuthorIDFK(db XODB, authorID int64, queryArgs *BookQueryArguments) (int, error) {
	queryArgs = ApplyBookQueryArgsDefaults(queryArgs)

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pos := 0
		pls := make([]string, 0, len(queryArgs.filterArgs.filterPairs))
		for _, pair := range queryArgs.filterArgs.filterPairs {
			if pair.fieldName == "author_id" {
				return -1, fmt.Errorf("already have condition on field:AuthorID, because of foregin key Author")
			}
			pos++
			pls = append(pls, fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, pos))
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}
	params = append(params, authorID)
	placeHolders = fmt.Sprintf(`%s "author_id" = :%d AND `, placeHolders, len(params))

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "C##ADMIN"."books" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// AuthorInBook returns the Author associated with the Book's AuthorID (author_id).
//
// Generated from foreign key 'sys_c007901'.
func (s *GodrorStorage) AuthorInBook(db XODB, b *Book) (*Author, error) {
	return s.AuthorByAuthorID(db, b.AuthorID)
}

// BooksByTitleYear retrieves a row from '"C##ADMIN"."books"' as a Book.
//
// Generated from index 'books_title_idx'.
func (s *GodrorStorage) BooksByTitleYear(db XODB, title string, year int64) ([]*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" ` +
		`FROM "C##ADMIN"."books" ` +
		`WHERE "title" = :1 AND "year" = :2`

	// run query
	s.info(sqlstr, title, year)
	q, err := db.Query(sqlstr, title, year)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Book{}
	for q.Next() {
		b := Book{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BookByBookID retrieves a row from '"C##ADMIN"."books"' as a Book.
//
// Generated from index 'sys_c007899'.
func (s *GodrorStorage) BookByBookID(db XODB, bookID int64) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" ` +
		`FROM "C##ADMIN"."books" ` +
		`WHERE "book_id" = :1`

	// run query
	s.info(sqlstr, bookID)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, bookID).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// BookByIsbn retrieves a row from '"C##ADMIN"."books"' as a Book.
//
// Generated from index 'sys_c007900'.
func (s *GodrorStorage) BookByIsbn(db XODB, isbn string) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"book_id", "author_id", "isbn", "title", "year", "available", "tags" ` +
		`FROM "C##ADMIN"."books" ` +
		`WHERE "isbn" = :1`

	// run query
	s.info(sqlstr, isbn)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, isbn).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
